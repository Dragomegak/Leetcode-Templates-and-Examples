/*
Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
Empty cells are indicated by the character '.'.

https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png
https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png
*/

class Solution {
private:
    void update(int r, int c, int value,
                   vector<vector<int>> &row,vector<vector<int>> &col,vector<vector<int>> &box,int reset){
        row[r][value]=col[c][value]=box[3*(r/3)+c/3][value]=reset;
        return;
    }
    bool backtrack(vector<vector<char>>& board,int pos,
                   vector<vector<int>> &row,vector<vector<int>> &col,vector<vector<int>> &box){
        if(pos==81) return true;
        int r=pos/9,c=pos%9;
        if(board[r][c]!='.')
            return backtrack(board,pos+1,row,col,box);
        for(int i=1;i<=9;i++){
            if(!row[r][i]&&!col[c][i]&&!box[3*(r/3)+c/3][i]){
                board[r][c]=i+'0';
                update(r,c,i,row,col,box,1);
                if(backtrack(board,pos+1,row,col,box)) return true;
                board[r][c]='.';
                update(r,c,i,row,col,box,0);
            }
        }
        return false;
    }
public:
    void solveSudoku(vector<vector<char>>& board) {
        vector<vector<int>> row(9,vector<int>(10,0)),col(9,vector<int>(10,0)),box(9,vector<int>(10,0));
        for(int i=0;i<9;i++)
            for(int j=0;j<9;j++)
                if(board[i][j]!='.'){
                    row[i][board[i][j]-'0']=1;
                    col[j][board[i][j]-'0']=1;
                    box[3*(i/3)+j/3][board[i][j]-'0']=1;
                }
        backtrack(board,0,row,col,box);
        return;
    }
};
