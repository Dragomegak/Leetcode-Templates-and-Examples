/*
There are a total of n courses you have to take, labeled from 0 to n-1.
Some courses may have prerequisites, for example to take course 0 you have to first take course 1, 
which is expressed as a pair: [0,1]
Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

Input: 2, [[1,0],[0,1]]
Output: false
*/

class Solution {
public:    
    //topological sort
    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {
        vector<vector<int>> graph(numCourses,vector<int>());
        vector<int> indegree(numCourses,0);
        for(auto i:prerequisites){
            graph[i.second].push_back(i.first);
            indegree[i.first]++;
        }
        queue<int> todo;
        for(int i=0;i<numCourses;i++)
            if(!indegree[i])
                todo.push(i);
        vector<int> path;
        while(!todo.empty()){
            int cur=todo.front();
            todo.pop();
            path.push_back(cur);
            for(auto i:graph[cur]){
                indegree[i]--;
                if(!indegree[i]) todo.push(i);
            }
        }
        return (path.size()==numCourses)?true:false;
    }
};
/*
    //DFS 找到graph的circle
public:
    bool DFS(const vector<vector<int>>& graph,vector<bool>& visited,unordered_map<int,int> &path,int start){
        visited[start]=true;
        bool result;
        path[start]=1;
        for(auto i:graph[start]){
            if(visited[i]&&path.find(i)!=path.end()){
                return false;
            }
            
            else if(!visited[i]){
                if(!DFS(graph,visited,path,i))
                    return false;
            }
            
        }
        //IMPORTANT: ERASE PATH AFTER DONE!!!
        path.erase(start);
        return true;
    }
    
    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {
        vector<vector<int>> graph(numCourses,vector<int>());
        for(auto i:prerequisites)
            graph[i.second].push_back(i.first);
        vector<bool> visited(numCourses,0);
        for(int i=0;i<numCourses;i++)
        {
            //cout<<visited[i];
            if(!visited[i]){
                //path 应该可以用unordered_set, 存当前路径
                unordered_map<int,int> path;
                if(!DFS(graph,visited,path,i))
                    return false;
            }
        }
        return true;
    }
*/
