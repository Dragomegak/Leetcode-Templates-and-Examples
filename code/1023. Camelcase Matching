/*
A query word matches a given pattern if we can insert lowercase letters to the pattern word so that it equals the query. 
(We may insert each character at any position, and may insert 0 characters.)

Given a list of queries, and a pattern, return an answer list of booleans, 
where answer[i] is true if and only if queries[i] matches the pattern.


["FooBar","FooBarTest","FootBall","FrameBuffer","ForceFeedBack"]
"FoBa"
[true,false,true,false,false]
*/

class Solution {
public:
    bool helper(const string & q, const string &p){
        int n=q.size(),m=p.size(),i=0,j=0;
        while(i<n && j<m){
            if(q[i]==p[j]) {
                i++,j++;
            }
            else{
                if(islower(q[i])) i++;
                else return false;
            }
        }
        if(j!=m) return false;
        while(i<n){
            if(!islower(q[i++])) return false;
        }
        return true;
    }
    vector<bool> camelMatch(vector<string>& queries, string pattern) {
        vector<bool> res;
        for(auto i: queries)
            res.push_back(helper(i,pattern));
        return res;
    }
};
