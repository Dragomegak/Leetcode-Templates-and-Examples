/*
Return the root node of a binary search tree that matches the given preorder traversal.
(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value < node.val, 
and any descendant of node.right has a value > node.val.  Also recall that a preorder traversal displays the value of the node first, 
then traverses node.left, then traverses node.right.)

Input: [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]

1 <= preorder.length <= 100
The values of preorder are distinct.
*/

class Solution {
private:
    TreeNode* helper(vector<int>& preorder, int &pos,int limit){
        int n=preorder.size();
        TreeNode *res=new TreeNode(preorder[pos]);
        if(pos+1<n && preorder[pos+1]<preorder[pos]) {
            pos++;
            res->left=helper(preorder, pos, preorder[pos-1]);
        }
        if(pos+1<n && preorder[pos+1]<limit){
            pos++;
            res->right=helper(preorder,pos,limit);
        }
        return res;
    }
public:
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        int pos=0;
        return helper(preorder,pos,INT_MAX);
    }
};
